// ------------------------------
// Vars
// ------------------------------

// wm-vars-get('foo [bar] [baz]'); => "bar" "baz"
// wm-vars-get('foo');             => ()
@function wm-vars-get($string) {
    $vars: ();
    $vars: join($vars, wm-str-match($string, '[', ']'), comma);
    $vars: wm-list-map($vars, wm-str-remove, '[', ']');
    @return $vars;
}

// wm-vars-remove('foo [bar] [baz]'); => "foo"
@function wm-vars-remove($string) {
    @each $var in wm-vars-get($string) {
        $string: wm-str-remove($string, '[' + $var + ']');
    }
    @return wm-str-trim($string);
}

// wm-vars-has('foo [bar] [baz]'); => true
// wm-vars-has('foo');             => false
@function wm-vars-has($string) {
    @return length(wm-vars-get($string)) > 0;
}

// ------------------------------
// Styles
// ------------------------------

// wm-styles-get-vars((width: '[foo]', height: '[bar]'));
// => "foo" "bar"
@function wm-styles-get-vars($styles) {
    @return wm-vars-get(wm-list-to-text(map-values($styles)));
}

// wm-styles-to-string((margin: 1rem 2rem)); => (margin: "1rem 2rem")
@function wm-styles-to-string($styles) {
    @each $property, $value in $styles {
        $styles: wm-map-set($styles, $property, quote($value + ''));
    }
    @return $styles;
}

// wm-styles-remove-normal-values((width: '1rem', height: '[foo]'));
// => (height: "[foo]")
@function wm-styles-remove-normal-values($styles) {
    $new-styles: ();
    @each $property, $value in $styles {
        @if wm-vars-has($value) {
            $new-styles: wm-map-set($new-styles, $property, $value);
        }
    }
    @return $new-styles;
}

// wm-styles-remove-vars((width: '1rem', height: '[foo]'));
// => (width: "1rem")
@function wm-styles-get-normal-values($styles) {
    $new-styles: ();
    @each $property, $value in $styles {
        @if not wm-vars-has($value) {
            $new-styles: wm-map-set($new-styles, $property, $value);
        }
    }
    @return $new-styles;
}

// wm-styles-build((width: '[foo]', height: '[bar]'), (foo: 1rem, bar: 2rem));
// => (width: "1rem", height: "2rem")
// wm-styles-build((width: '[foo]', height: '[bar]'), (foo: 1rem, bar: null));
// => (width: "1rem", height: "[bar]")
@function wm-styles-build($styles, $var-and-value) {
    @each $var, $value in $var-and-value {
        @each $property, $value-with-var in $styles {
            @if $value and wm-str-has($value-with-var, '[' + $var + ']') {
                $new-value: wm-str-replace($value-with-var, '[' + $var + ']', $value);
                $styles: wm-map-set($styles, $property, $new-value);
            }
        }
    }
    @return $styles;
}

@function wm-styles-fix-before-building($styles) {
    @each $property, $value_str in $styles {
        // Because a space after a minus sign
        // like "1em -[val]" or "[val] -1em" is removed, makes up.
        $value_str: wm-str-replace($value_str, '-[', ' -[');
        $value_str: wm-str-replace($value_str, ']-', '] -');

        $styles: wm-map-set($styles, $property, $value_str);
    }
    @return $styles;
}

@function wm-styles-fix-after-building($styles) {
    @each $property, $value_str in $styles {
        // Removes remaining variables like "1rem [foo]".
        $value_str: wm-vars-remove($value_str);

        // Fix the case that two minuses continue like "--10px".
        $value_str: wm-str-replace($value_str, '--', '-');

        // Fix invalid values.
        $value_str: wm-str-replace($value_str, '-auto', 'auto');
        $value_str: wm-str-replace($value_str, '-none', 'none');

        $styles: wm-map-set($styles, $property, wm-str-trim($value_str));
    }
    @return $styles;
}

// ------------------------------
// Selector
// ------------------------------

// wm-selector-get-group-number('.foo, .bar, .baz'); => 3
@function wm-selector-get-group-number($selector_str) {
    @return length(wm-str-split($selector_str, ','));
}

// Returns list of selectors that contains $substr.
//
// wm-selector-split-with-substr('.foo, .bar-A, .baz-A', 'A');
// => (".bar-A", ".baz-A")
@function wm-selector-split-with-substr($selector_str, $substr) {
    $result: ();

    // Iterates for grouping selector like ".foo, .bar, .baz { }".
    @each $one-selector in wm-str-split($selector_str, ',') {
        $one-selector: wm-str-trim($one-selector);
        @if wm-str-has($one-selector, $substr) {
            $result: append($result, $one-selector);
        }
    }
    @return $result;
}

// Returns list of selectors that contains no $substr.
//
// wm-selector-split-without-substr('.foo, .bar-A, .baz-A', 'A');
// => (".foo",)
@function wm-selector-split-without-substr($selector_str, $substr) {
    $result: ();

    // Iterates for grouping selector like ".foo, .bar, .baz { }".
    @each $one-selector in wm-str-split($selector_str, ',') {
        $one-selector: wm-str-remove($one-selector, ' ');
        @if not wm-str-has($one-selector, $substr) {
            $result: append($result, $one-selector);
        }
    }
    @return $result;
}

// Replaces $replacement_str in $selector_str by $list,
// returns a string of grouping selector.
//
// wm-selector-combine('.selector-A', 'A', (1, 2, 3));
// => ".selector-1, .selector-2, .selector-3"
@function wm-selector-combine($selector_str, $replacement_str, $list) {
    $grouping-selector: ();
    @each $value in $list {
        $grouping-selector: append($grouping-selector, wm-str-replace($selector_str, $replacement_str, $value), comma);
    }
    @return wm-list-to-text($grouping-selector, $separator: ', ');
}

// wm-selector-remove-min-breakpoint('.all-selector', (all: 0, sm: 576px, md: 768px), 0);
// => ".-selector"
// wm-selector-remove-min-breakpoint('.all-selector', (all: 0, sm: 576px, md: 768px), 1);
// => ".selector"
@function wm-selector-remove-min-breakpoint($selector, $breakpoints, $addition) {
    $min-breakpoint-name: wm-map-key(wm-map-min($breakpoints), 1) + '';
    $first-index: str-index($selector, $min-breakpoint-name);
    $last-index: wm-str-last-index($selector, $min-breakpoint-name);

    @if (not $first-index) or (not $last-index) {
        @return $selector;
    }

    @if $addition > 0 {
        $last-index: $last-index + $addition;
    }
    @if $addition < 0 {
        $first-index: $first-index + $addition;
    }
    @return wm-str-remove($selector, str-slice($selector, $first-index, $last-index));
}

// $wm-breakpoint-placeholder: BR;
// $wm-value-placeholder: VAL;
// $wm-min-breakpoint-prefix: false;
// $wm-min-breakpoint-addition: 1;
// wm-selector-build('.BR-foo-VAL', (all: 0, sm: 576px, md: 768px), sm, 10);
// => .sm-foo-10
@function wm-selector-build($base-selector, $breakpoints: null, $breakpoint-name: null, $value-name: null) {
    @if $breakpoint-name {
        $base-selector: wm-str-replace($base-selector, $wm-breakpoint-placeholder, $breakpoint-name);
    }
    @if $breakpoints and (not $wm-min-breakpoint-prefix) {
        $base-selector: wm-selector-remove-min-breakpoint($base-selector, $breakpoints, $wm-min-breakpoint-addition);
    }
    @if $value-name {
        $base-selector: wm-str-replace($base-selector, $wm-value-placeholder, $value-name);
    }
    @return $base-selector;
}

// ------------------------------
// Shorthand
// ------------------------------

// wm-shorthand-to-styles(margin);
// => (margin: [val])
// wm-shorthand-to-styles((margin, true));
// => (margin: [val] !important)
@function wm-shorthand-to-styles($shorthand) {
    @if type-of($shorthand) == string {
        @return ($shorthand: [val]);
    }
    @if type-of($shorthand) == list {
        $property: nth($shorthand, 1);
        $is-important: nth($shorthand, 2);
        @if $is-important {
            @return ($property: [val] !important);
        }
        @return ($property: [val]);
    }
    @return $shorthand;
}

// wm-shorthand-to-vars((1: 1rem, 2: 2rem, 3: 3rem));
// => (val: (1: 1rem, 2: 2rem, 3: 3rem))
@function wm-shorthand-to-vars($shorthand) {
    @if wm-map-depth($shorthand) <= 1 {
        @return (val: $shorthand);
    }
    @return $shorthand;
}

// ------------------------------
// Core
// ------------------------------

// If there are exceptions, warns it and returns false.
@function wm-verify-args($content, $vars, $remove, $selector, $breakpoints, $disable) {
    @if $disable {
        @return false;
    }

    // If $selector is missing.
    @if (not $selector) or ($selector == '') {
        @warn '#{$wm-warning-title}Needs $selector argument, or call like ".your-selector { @include #{$wm-mixin-name}(...) { ... } }".';
        @return false;
    }

    // If $selector contains no $wm-breakpoint-placeholder.
    @if $breakpoints and (length(wm-selector-split-without-substr($selector, $wm-breakpoint-placeholder)) > 0) {
        @warn '#{$wm-warning-title}Needs the "#{$wm-breakpoint-placeholder}" string in selector. e.g., ".#{$wm-breakpoint-placeholder}-your-selector".';
        @return false;
    }

    // If $selector contains no $wm-value-placeholder.
    @if $vars and (length(wm-selector-split-without-substr($selector, $wm-value-placeholder)) > 0) {
        @warn '#{$wm-warning-title}Needs the "#{$wm-value-placeholder}" string in selector. e.g., ".your-selector-#{$wm-value-placeholder}".';
        @return false;
    }

    // If $selector contains $wm-breakpoint-placeholder.
    @if (not $breakpoints) and (length(wm-selector-split-with-substr($selector, $wm-breakpoint-placeholder)) > 0) {
        @warn '#{$wm-warning-title}Selector "#{$selector}" contains the "#{$wm-breakpoint-placeholder}" string, but needless when the breakpoints is falsy.';
        @return false;
    }

    // If $selector contains $wm-value-placeholder.
    @if (not $vars) and (length(wm-selector-split-with-substr($selector, $wm-value-placeholder)) > 0) {
        @warn '#{$wm-warning-title}Selector "#{$selector}" contains the "#{$wm-value-placeholder}" string, but needless when $vars argument is undefined.';
        @return false;
    }

    // If only receives $vars.
    @if $vars and (not $content) {
        @warn '#{$wm-warning-title}Needs $content argument together if you set $vars argument.';
        @return false;
    }

    // If only receives $remove.
    @if $remove and (not $vars) {
        @warn '#{$wm-warning-title}Needs $vars argument together if you set $remove argument.';
        @return false;
    }

    @return true;
}

// If breakpoint < 1, outputs the content block to outside the media block.
@mixin wm-mq($from) {
    @if wm-remove-unit($from) <= 0 {
        @content;
    } @else {
        @media (min-width: wm-add-unit($from, px)) {
            @content;
        }
    }
}

@mixin wm-output-styles($selector, $styles: null) {
    @at-root {
        #{$selector} {
            @if $styles {
                @each $property, $value in $styles {
                    #{$property}: #{$value};
                }
            }
            @content;
        }
    }
}
