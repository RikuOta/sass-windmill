// ------------------------------
// Fallback
// Will be removed in version 1.2.0.
// ------------------------------

// wm-change-doll-to-bracket('foo $bar$'); => "foo [bar]"
@function wm-change-doll-to-bracket($string) {
    $index: 1;
    @while (true) {
        $is-odd: $index % 2 != 0;

        @if not wm-str-has($string, '$') {
            @return $string;
        }
        @if $is-odd and length(wm-str-indexes($string, '$')) <= 1 {
            @return $string;
        }

        @if $is-odd {
            $string: wm-str-replace($string, '$', '[', true);
        } @else {
            $string: wm-str-replace($string, '$', ']', true);
        }
        $index: $index + 1;
    }
}

// wm-apply-fallback-to-declarations((margin: '$val$'));
// => (margin: "[val]")
@function wm-apply-fallback-to-declarations($declarations) {
    $new-declarations: ();
    @each $property, $value in $declarations {
        $new-value: wm-to-string($value);
        $new-value: wm-str-remove($new-value, '"', '\'');
        $new-value: wm-change-doll-to-bracket($new-value);
        $new-declarations: wm-map-set($new-declarations, $property, $new-value);
    }
    @return $new-declarations;
}

// wm-apply-fallback-to-values(('$val$': foo));
// => (val: foo)
@function wm-apply-fallback-to-values($values) {
    $new-values: ();
    @each $var, $map in $values {
        $new-values: wm-map-set($new-values, wm-str-remove($var, '$'), $map);
    }
    @return $new-values;
}

// ------------------------------
// Shorthand
// ------------------------------

// wm-make-declarations-with-shorthand(margin);
// => (margin: "[val]")
// wm-make-declarations-with-shorthand((margin, true));
// => (margin: "[val] !important")
@function wm-make-declarations-with-shorthand($declarations) {
    @if $declarations and (type-of($declarations) == string) {
        @return ($declarations: '[val]');
    }
    @if $declarations and (type-of($declarations) == list) {
        $property: nth($declarations, 1);
        $is-important: nth($declarations, 2);
        $important-frag: '';
        @if $is-important {
            $important-frag: ' !important';
        }
        @return ($property: '[val]' + $important-frag);
    }
    @return $declarations;
}

// wm-make-values-with-shorthand((1: 1rem, 2: 2rem, 3: 3rem));
// => (val: (1: 1rem, 2: 2rem, 3: 3rem))
@function wm-make-values-with-shorthand($values) {
    @if $values and (wm-map-depth($values) <= 1) {
        @return (val: $values);
    }
    @return $values;
}

// ------------------------------
// Main
// ------------------------------

// wm-get-vars('foo [bar] [baz]'); => ("bar", "baz")
// wm-get-vars('foo');             => ()
@function wm-get-vars($string) {
    $vars: ();
    $vars: join($vars, wm-str-match($string, '[', ']'));
    $vars: join($vars, wm-str-match($string, '$', '$')); // Fallback for "$".
    $vars: wm-list-map($vars, wm-str-remove, '[', ']', '$'); // "$" is fallback.
    @return $vars;
}

// wm-has-var('foo [bar] [baz]'); => true
// wm-has-var('foo');             => false
@function wm-has-var ($string) {
    @return length(wm-get-vars($string)) > 0;
}

// wm-get-declarations-with-var((width: 1rem, height: [size]));
// => (height: [size])
@function wm-get-declarations-with-var($declarations) {
    $declarations-with-var: ();
    @each $property, $value in $declarations {
        @if wm-has-var(wm-to-string($value)) {
            $declarations-with-var: wm-map-set($declarations-with-var, $property, $value);
        }
    }
    @return $declarations-with-var;
}

// wm-get-declarations-without-var((width: 1rem, height: [size]));
// => (width: 1rem)
@function wm-get-declarations-without-var($declarations) {
    $declarations-without-var: ();
    @each $property, $value in $declarations {
        @if not wm-has-var(wm-to-string($value)) {
            $declarations-without-var: wm-map-set($declarations-without-var, $property, $value);
        }
    }
    @return $declarations-without-var;
}

@function wm-get-vars-from-declarations($declarations) {
    @return wm-get-vars(wm-list-to-text(map-values($declarations)));
}

// wm-declarations-to-string((margin: 10px 20px)); => (margin: "10px 20px")
@function wm-declarations-to-string($declarations) {
    $new-declarations: ();
    @each $property, $value in $declarations {
        $new-value_str: quote($value + '');
        $new-declarations: wm-map-set($new-declarations, $property, $new-value_str);
    }
    @return $new-declarations;
}

// wm-get-value((val: (1: 1rem, 2: 2rem, 3: 3rem)), val, 1); => 1rem
@function wm-get-value($values, $value-variable, $value-name) {
    @return wm-map-deep-get($values, $value-variable, $value-name);
}

@function wm-get-vars-from-values($values) {
    @return map-keys($values);
}

// wm-get-value-names((val: (1: 1rem, 2: 2rem, 3: 3rem))) => (1, 2, 3)
@function wm-get-value-names($values) {
    @return map-keys(wm-map-rest($values, 2));
}

// wm-remove-value-names((val: (1: 1rem, 2: 2rem, 3: 3rem)), 1); => (val: (2: 2rem, 3: 3rem))
@function wm-remove-value-names($values, $removed-value-names...) {
    $new-values: ();
    @each $var, $map in $values {
        $new-values: wm-map-set($new-values, $var, map-remove($map, $removed-value-names...));
    }
    @return $new-values;
}

// Returns a map of (value-variable: value).
//
// wm-get-var-and-value((val: (1: 1rem, 2: 2rem, 3: 3rem)), 1);
// => (val: 1rem)
@function wm-get-var-and-value($values, $value-name) {
    $var-and-value: ();
    @each $var in wm-get-vars-from-values($values) {
        $value: wm-get-value($values, $var, $value-name);
        @if $value {
            $var-and-value: wm-map-set($var-and-value, $var, $value);
        }
    }
    @return $var-and-value;
}

// wm-get-selector-group-number('.foo, .bar, .baz'); => 3
@function wm-get-selector-group-number($selector_str) {
    @return length(wm-str-split($selector_str, ','));
}

// Returns list of selectors that contains $substr.
//
// wm-split-selector-with-substr('.foo, .bar-A, .baz-A', 'A');
// => (".bar-A", ".baz-A")
@function wm-split-selector-with-substr($selector_str, $substr) {
    $selectors-list-with-substr: ();

    // Iterates for grouping selector like ".foo, .bar, .baz { }".
    @each $one-selector in wm-str-split($selector_str, ',') {
        $one-selector: wm-str-remove($one-selector, ' ');
        @if wm-str-has($one-selector, $substr) {
            $selectors-list-with-substr: append($selectors-list-with-substr, $one-selector);
        }
    }
    @return $selectors-list-with-substr;
}

// Returns list of selectors that contains no $substr.
//
// wm-split-selector-without-substr('.foo, .bar-A, .baz-A', 'A');
// =>  (".foo")
@function wm-split-selector-without-substr($selector_str, $substr) {
    $selectors-list-without-substr: ();

    // Iterates for grouping selector like ".foo, .bar, .baz { }".
    @each $one-selector in wm-str-split($selector_str, ',') {
        $one-selector: wm-str-remove($one-selector, ' ');
        @if not wm-str-has($one-selector, $substr) {
            $selectors-list-without-substr: append($selectors-list-without-substr, $one-selector);
        }
    }
    @return $selectors-list-without-substr;
}

// Replaces $replacement_str in $selector_str by $list,
// returns a string of grouping selector.
//
// wm-group-selector('.selector-A', 'A', (1, 2, 3));
// => ".selector-1, .selector-2, .selector-3"
@function wm-group-selector($selector_str, $replacement_str, $list) {
    $grouping-selector: ();
    @each $value in $list {
        $grouping-selector: append($grouping-selector, wm-str-replace($selector_str, $replacement_str, $value), 'comma');
    }
    @return wm-list-to-text($grouping-selector, ', ');
}

@function wm-get-min-breakpoint-name($breakpoints) {
    $min-breakpoint: wm-map-get-by-index($breakpoints, 1);
    @each $breakpoint in map-values($breakpoints) {
        @if $breakpoint < $min-breakpoint {
            $min-breakpoint: $breakpoint;
        }
    }
    @return wm-map-get-key($breakpoints, false, $min-breakpoint);
}

// $wm-min-breakpoint-prefix: false; // Global variable.
// $wm-min-breakpoint-addition: 1;   // Global variable.
// wm-remove-min-breakpoint-from-selector('all-selector', (all: 0, sm: 576px, md: 768px), all);
// => ".selector"
// wm-remove-min-breakpoint-from-selector('all-selector', (all: 0, sm: 576px, md: 768px), sm);
// => ".all-selector"
@function wm-remove-min-breakpoint-from-selector($selector_str, $breakpoints, $breakpoint-name) {
    @if $wm-min-breakpoint-prefix {
        @return $selector_str;
    }
    @if $breakpoint-name != wm-get-min-breakpoint-name($breakpoints) {
        @return $selector_str;
    }

    $replacement-str: '';
    $removed-addition-str: wm-str-slice-based-on-substr(
            $selector_str, $breakpoint-name + '', 1, abs($wm-min-breakpoint-addition), $wm-min-breakpoint-addition < 0
    );
    @if $wm-min-breakpoint-addition > 0 {
        $replacement-str: $breakpoint-name + $removed-addition-str;
    } @else {
        $replacement-str: $removed-addition-str + $breakpoint-name
    }
    @return wm-str-replace($selector_str, $replacement-str, '');
}

// wm-push-value-to-declarations((width: [size]), (size: (1: 1rem, 2: 2rem, 3: 3rem)), 1);
// => (width: 1rem)
@function wm-push-value-to-declarations($declarations, $values, $value-name) {
    $declarations-pushed-value: $declarations;
    @each $var, $value in wm-get-var-and-value($values, $value-name) {
        @each $property, $dec-value in $declarations-pushed-value {
            @if wm-str-has(wm-to-string($dec-value), $var) {
                $new-value: wm-to-string($dec-value);
                $new-value: wm-str-remove($new-value, '\'', '\"'); // Remove quote of '$variable$'.
                $new-value: wm-str-replace($new-value, '[#{$var}]', $value);
                $declarations-pushed-value: wm-map-set($declarations-pushed-value, $property, #{$new-value});
            }
        }
    }

    // Removes declarations with remaining variables.
    $declarations-pushed-value: wm-get-declarations-without-var($declarations-pushed-value);

    @return $declarations-pushed-value;
}

@mixin wm-output-declarations($declarations) {
    @each $property, $value in $declarations {
        #{$property}: #{$value};
    }
}

// If breakpoint < 1, outputs styles to outside media block.
@mixin wm-mq($from) {
    @if wm-remove-unit($from) <= 0 {
        @content;
    } @else {
        @media (min-width: wm-add-unit($from, px)) {
            @content;
        }
    }
}

@mixin wm-warn-var-number-mismatch($declarations, $values) {
    $declarations-vars: wm-get-vars-from-declarations($declarations);
    $values-vars: wm-get-vars-from-values($values);

    // Variables that $values has and $declarations doesn't have.
    $missing-declarations-vars: ();
    @each $var in $values-vars {
        @if not wm-list-has($declarations-vars, $var) {
            $missing-declarations-vars: append($missing-declarations-vars, $var);
        }
    }

    // Variables that $values doesn't have and $declarations has.
    $missing-values-vars: ();
    @each $var in $declarations-vars {
        @if not wm-list-has($values-vars, $var) {
            $missing-values-vars: append($missing-values-vars, $var);
        }
    }

    @if length($missing-declarations-vars) > 0 {
        @warn '#{$wm-warning-title}declarations argument is missing variable #{wm-list-to-text(wm-list-unique($missing-declarations-vars), ' and ', '\"')}.';
    }
    @if length($missing-values-vars) > 0 {
        @warn '#{$wm-warning-title}values argument is missing variable #{wm-list-to-text(wm-list-unique($missing-values-vars), ' and ', '\"')}.';
    }
}

// If there is exceptions, warns it and returns false.
@function wm-handle-exception($selector_str, $breakpoints, $declarations, $values, $disable) {
    @if $disable {
        @return false;
    }

    // If $selector is missing.
    @if (not $selector_str) or ($selector_str == '') {
        @warn '#{$wm-warning-title}Needs $selector argument, or call like ".your-selector { @include #{$wm-mixin-name}(...) { ... } }".';
        @return false;
    }

    // If $selector contains no $wm-breakpoint-placeholder.
    @if $breakpoints and (length(wm-split-selector-without-substr($selector_str, $wm-breakpoint-placeholder)) > 0) {
        @warn '#{$wm-warning-title}Needs the "#{$wm-breakpoint-placeholder}" string in selector. e.g., ".#{$wm-breakpoint-placeholder}-your-selector".';
        @return false;
    }

    // If $selector contains no $wm-value-placeholder.
    @if $values and (length(wm-split-selector-without-substr($selector_str, $wm-value-placeholder)) > 0) {
        @warn '#{$wm-warning-title}Needs the "#{$wm-value-placeholder}" string in selector. e.g., ".your-selector-#{$wm-value-placeholder}".';
        @return false;
    }

    // If $selector contains $wm-breakpoint-placeholder.
    @if (not $breakpoints) and (length(wm-split-selector-with-substr($selector_str, $wm-breakpoint-placeholder)) > 0) {
        @warn '#{$wm-warning-title}Selector "#{$selector_str}" contains the "#{$wm-breakpoint-placeholder}" string, but needless when the breakpoints is falsy.';
        @return false;
    }

    // If $selector contains $wm-value-placeholder.
    @if (not $values) and (length(wm-split-selector-with-substr($selector_str, $wm-value-placeholder)) > 0) {
        @warn '#{$wm-warning-title}Selector "#{$selector_str}" contains the "#{$wm-value-placeholder}" string, but needless when values argument is undefined.';
        @return false;
    }

    // If only receives $values.
    @if $values and (not $declarations) {
        @warn '#{$wm-warning-title}Needs declarations argument together if you set values argument.';
        @return false;
    }

    @return true;
}

@mixin wm-output-declarations-with-var($selector_str, $breakpoints, $breakpoint-name, $declarations, $values, $value-name) {
    @if $breakpoints and $breakpoint-name {
        $selector_str: wm-str-replace($selector_str, $wm-breakpoint-placeholder, $breakpoint-name);
        $selector_str: wm-remove-min-breakpoint-from-selector($selector_str, $breakpoints, $breakpoint-name);
    }
    $selector_str: wm-str-replace($selector_str, $wm-value-placeholder, $value-name);
    @at-root #{$selector_str} {
        @include wm-output-declarations(wm-push-value-to-declarations(wm-get-declarations-with-var($declarations), $values, $value-name));
    }
}

@mixin wm-output-declarations-without-var($selector_str, $breakpoints, $breakpoint-name, $declarations, $values) {
    @if $values {
        $selector_str: wm-group-selector($selector_str, $wm-value-placeholder, wm-get-value-names($values));
    }
    @if $breakpoints and $breakpoint-name {
        $selector_str: wm-str-replace($selector_str, $wm-breakpoint-placeholder, $breakpoint-name);
        $selector_str: wm-remove-min-breakpoint-from-selector($selector_str, $breakpoints, $breakpoint-name);
    }
    @at-root #{$selector_str} {
        @if $declarations {
            @include wm-output-declarations(wm-get-declarations-without-var($declarations));
        }
        @content;
    }
}
