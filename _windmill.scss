@import './windmill-utils';
@import './windmill-lib';

// ------------------------------
// Default settings
// ------------------------------

$wm-breakpoints: (
    all: 0px,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px
) !default;
$wm-breakpoint-placeholder: 'BR' !default;
$wm-value-placeholder: 'VAL' !default;
$wm-min-breakpoint-prefix: false !default;
$wm-min-breakpoint-addition: 1 !default;

// ------------------------------
// Main mixin
// ------------------------------

$wm-mixin-name: 'windmill';
$wm-warning-title: '[Windmill warn]: ';

@mixin windmill(
    $content: null,
    $vars: null,
    $remove: null,
    $selector: null,
    $breakpoints: $wm-breakpoints,
    $disable: false
) {
    $is-shorthand-exception: false;
    @if (wm-styles-is-shorthand($content)) and (not wm-vars-is-shorthand($vars)) {
        @warn '#{$wm-warning-title}$vars argument is wrong, or only $content argument is shorthand.';
        $is-shorthand-exception: true;
    }
    @if (not wm-styles-is-shorthand($content)) and (wm-vars-is-shorthand($vars)) {
        @warn '#{$wm-warning-title}$content argument is wrong, or only $vars argument is shorthand.';
        $is-shorthand-exception: true;
    }

    $is-args-exception: false;
    @if not $is-shorthand-exception {
        @if (wm-styles-is-shorthand($content)) and (wm-vars-is-shorthand($vars)) {
            $content: wm-convert-shorthand-to-styles($content);
            $vars: wm-convert-shorthand-to-vars($vars);
        }

        @if $content != null {
            $content: wm-styles-to-string($content);
        }

        @if $selector {
            $selector: wm-list-to-text($selector, $separator: ', ');
        } @else if & {
            $selector: wm-list-to-text(&, $separator: ', ');
        }

        @if $breakpoints == true {
            $breakpoints: $wm-breakpoints;
        }

        // If $selector contains no $wm-breakpoint-placeholder,
        // sets false to $breakpoints.
        @if $selector and (length(wm-selector-split-without-substr($selector, $wm-breakpoint-placeholder)) == wm-selector-get-group-number($selector)) {
            $breakpoints: false;
        }

        $is-args-exception: not wm-verify-args($content, $vars, $remove, $selector, $breakpoints, $disable);
    }

    @if (not $is-shorthand-exception) and (not $is-args-exception) {
        // Removes specific the value-name from $vars.
        @if $remove {
            @each $var, $map in $vars {
                $vars: wm-map-set($vars, $var, map-remove($map, $remove...));
            }
        }

        // Warns mismatch of variables in $content and $vars.
        @if $content and $vars {
            $var-names1: wm-styles-get-vars($content);
            $var-names2: map-keys($vars);
            $missing-var-names1: wm-list-remove($var-names2, $var-names1...);
            $missing-var-names1_str: wm-list-to-text(wm-list-unique($missing-var-names1), '"', '"', ' and ');
            $missing-var-names2: wm-list-remove($var-names1, $var-names2...);
            $missing-var-names2_str: wm-list-to-text(wm-list-unique($missing-var-names2), '"', '"', ' and ');

            @if length($missing-var-names1) > 0 {
                @warn '#{$wm-warning-title}There are variables that is not used in $content argument: #{$missing-var-names1_str}';
            }
            @if length($missing-var-names2) > 0 {
                @warn '#{$wm-warning-title}There are variables that is not set to $vars argument: #{$missing-var-names2_str}';
            }
        }

        // If the breakpoints is falsy,
        // set the temporary breakpoints to execute Each-statement only once.
        $breakpoints: if($breakpoints, $breakpoints, (all: 0));

        @each $breakpoint-name, $breakpoint in $breakpoints {
            @include wm-mq($breakpoint) {
                @if not $vars {
                    @include wm-output-styles (
                        $selector: wm-selector-build($selector, $breakpoints, $breakpoint-name),
                        $styles: if($content, wm-styles-get-normal-values($content), null)
                    ) {
                        @content;
                    }
                }

                @if $vars {
                    // Combines normal values and outputs them.
                    @include wm-output-styles (
                        $selector: wm-selector-build(wm-selector-combine($selector, $wm-value-placeholder, map-keys(wm-map-descend($vars))), $breakpoints, $breakpoint-name),
                        $styles: if($content, wm-styles-get-normal-values($content), null)
                    ) {
                        @content;
                    }

                    @each $value-name in map-keys(wm-map-descend($vars)) {
                        $styles: wm-styles-remove-normal-values($content);
                        $styles: wm-styles-fix-before-building($styles);
                        $styles: wm-styles-build($styles, wm-map-skip($vars, $value-name));
                        $styles: wm-styles-fix-after-building($styles);

                        @include wm-output-styles (
                            $selector: wm-selector-build($selector, $breakpoints, $breakpoint-name, $value-name),
                            $styles: $styles
                        );
                    }
                }
            }
        }
    }
}
