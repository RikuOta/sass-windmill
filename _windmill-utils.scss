// ------------------------------
// Lists
// ------------------------------

@function wm-list-has($list, $value) {
    @return index($list, $value) != null;
}

@function wm-list-last($list) {
    @return nth($list, length($list));
}

@function wm-list-unique($list) {
    $unique-list: ();
    @each $value in $list {
        @if not wm-list-has($unique-list, $value) {
            $unique-list: append($unique-list, $value);
        }
    }
    @return $unique-list;
}

// wm-list-slice((foo, bar, baz), 1, 2); => (foo)
// wm-list-slice((foo, bar, baz), 2); => (bar, baz)
@function wm-list-slice($list, $begin, $end: length($list) + 1) {
    $sliced-list: ();
    @each $value in $list {
        $index: index($list, $value);
        @if (($index >= $begin) and ($index < $end)) {
            $sliced-list: append($sliced-list, $value);
        }
    }
    @return $sliced-list;
}

// wm-list-to-string((foo, bar, baz), ' and ', '\"') =>  '"foo" and "bar" and "baz"'
@function wm-list-to-string($list, $separator: '', $enclosure: '', $ignore-last-separator: true) {
    @if type-of($list) != list {
        @return $list;
    }

    $result-string: '';
    @each $value in $list {
        $result-string: $result-string + $enclosure + $value + $enclosure + $separator;
    }
    @if $ignore-last-separator {
        $result-string: str-slice($result-string, 1, (str-length($result-string) - str-length($separator)));
    }
    @return $result-string;
}

// ------------------------------
// Numbers
// ------------------------------

@function wm-add-unit($number, $unit: px) {
    @if unitless($number) {
        @return $number + $unit;
    } @else {
        @return $number;
    }
}

@function wm-remove-unit($number) {
    @if (type-of($number) == number) and (not unitless($number)) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

// ------------------------------
// Strings
// ------------------------------

@function wm-to-string($value) {
    @if $value == null {
        @return 'null';
    }
    @if type-of($value) == list {
        @return quote(unquote(#{$value + ''}));
    }
    @return quote(unquote(#{$value}));
}

@function wm-str-has($string, $substring) {
    @return str-index($string, $substring) != null;
}

@function wm-str-replace($string, $substring, $new-substring: '', $is-once: false) {
    $index: str-index($string, $substring);
    @if $index {
        $before: str-slice($string, 1, $index - 1);
        $after: str-slice($string, ($index + str-length($substring)));
        $new-string: $before + $new-substring + $after;
        @if not $is-once {
            @return wm-str-replace($new-string, $substring, $new-substring);
        } @else {
            @return $new-string;
        }
    } @else {
        @return $string;
    }
}

// wm-str-remove(foobarbaz, foo, baz); => bar
@function wm-str-remove($string, $substrings...) {
    @each $substring in $substrings {
        $string: wm-str-replace($string, $substring, '');
    }
    @return $string;
}

// wm-str-indexes('foo,bar,baz', ','); => (4 8)
@function wm-str-indexes($string, $substring) {
    @if not wm-str-has($string, $substring) {
        @return null;
    }

    $condition: true;
    $tmp-string: $string;
    $indexes: ();
    $before-index: 0;
    @while $condition {
        $index: str-index($tmp-string, $substring);
        @if $index {
            $indexes: append($indexes, $index + $before-index);
            $before-index: $before-index + $index;
            $tmp-string: str-slice($tmp-string, $index + 1);
        } @else {
            $condition: false;
        }
    }
    @return $indexes;
}

// wm-str-split('foo,bar,baz', ','); => ("foo" "bar" "baz")
@function wm-str-split($string, $separator) {
    @if not wm-str-has($string, $separator) {
        @return append((), $string);
    }

    $list: ();
    $indexes: wm-str-indexes($string, $separator);
    @for $i from 1 through length($indexes) {
        $begin-index: 1;
        $end-index: nth($indexes, 1) - 1;
        @if $i > 1 {
            $begin-index: nth($indexes, $i - 1) + 1;
            $end-index: nth($indexes, $i) - 1;
        }
        $list: append($list, str-slice($string, $begin-index, $end-index));
    }
    $list: append($list, str-slice($string, wm-list-last($indexes) + 1));
    @return $list;
}

// wm-str-slice-based-on-substr(abcdef, cd, 1, 2); => ef
// wm-str-slice-based-on-substr(abcdef, cd, 1, 2, true); => ab
@function wm-str-slice-based-on-substr($string, $base-substring, $begin_positive, $end_positive, $back: false) {
    @if not wm-str-has($string, $base-substring) {
        @return $string;
    }

    $index: str-index($string, $base-substring);
    $base-substr-length: str-length($base-substring);
    $begin-of-slice: $index + ($begin_positive - 1) + ($base-substr-length - 1) + 1;
    $end-of-slice: $index + ($end_positive - 1) + ($base-substr-length - 1) + 1;

    @if $back {
        $begin-of-slice: $begin-of-slice - $base-substr-length - $end_positive;
        $end-of-slice: $end-of-slice - $base-substr-length - $end_positive;
        @return str-slice($string, $begin-of-slice, $end-of-slice);
    }

    @return str-slice($string, $begin-of-slice, $end-of-slice);
}

// wm-str-match('foo [bar] baz [qux]', '[', ']'); => ("[bar]", "[qux]")
@function wm-str-match($string, $begin-substring, $end-substring) {
    $string-list: ();
    @while true {
        $begin-index: str-index($string, $begin-substring);

        $end-index: null;
        @if $begin-index {
            $end-index: str-index(str-slice($string, $begin-index + 1), $end-substring);
        }
        @if $end-index {
            $end-index: $begin-index + $end-index;
        }

        @if $begin-index and $end-index and (abs($begin-index - $end-index) > 1) {
            $matched-string: str-slice($string, $begin-index, $end-index);
            $string-list: append($string-list, $matched-string);
            $string: str-slice($string, $end-index + 1);
        } @else {
            @return wm-list-unique($string-list);
        }
    }
}

// ------------------------------
// Maps
// ------------------------------

// wm-map-get-by-index((foo: 100, bar: 200), 2); => 200
@function wm-map-get-by-index($map, $index) {
    @return map-get($map, nth(map-keys($map), $index));
}

// wm-map-get-key((foo: 100, bar: 200), 2); => bar
// wm-map-get-key((foo: 100, bar: 200), false, 200); => bar
@function wm-map-get-key($map, $index: false, $value: false) {
    $result-index: $index;
    @if $value {
        $result-index: index(map-values($map), $value);
    }
    @if not $result-index {
        @return null;
    }
    @if $result-index > length(map-keys($map)) {
        @return null;
    }
    @return nth(map-keys($map), $result-index);
}

// wm-map-set((foo: 100, bar: 200), baz, 300);
// => (foo: 100, bar: 200, baz: 300)
// wm-map-set((foo: 100, bar: 200), false, false, (baz: 300));
// => (foo: 100, bar: 200, baz: 300)
@function wm-map-set($map, $key: false, $value: false, $set-map: false) {
    @if $set-map {
        @return map-merge($map, $set-map);
    }
    @if $key and $value {
        @return map-merge($map, (unquote($key): $value));
    }
    @return $map;
}

// wm-map-deep-get((foo: (bar: 100)), foo, bar); => 100
@function wm-map-deep-get($map, $keys...) {
    $first-key: nth($keys, 1);

    @if length($keys) < 2 {
        @return map-get($map, $first-key);
    }

    $value-by-first-key: map-get($map, $first-key);
    @if type-of($value-by-first-key) == map {
        $keys-after-two: wm-list-slice($keys, 2);
        @return wm-map-deep-get($value-by-first-key, $keys-after-two...);
    } @else {
        @return $value-by-first-key;
    }
}

// wm-map-deep-remove((foo: 100, bar: (foo: 200, bar: 300, baz: 400)), foo, baz);
// => (bar: (bar: 300))
@function wm-map-deep-remove($map, $keys...) {
    @each $removed-key in $keys {
        @each $m-key, $value in $map {
            @if $removed-key == $m-key {
                $map: map-remove($map, $removed-key);
            }
            @if ($removed-key != $m-key) and (type-of($value) == map) {
                $map: map-merge($map, ($m-key: wm-map-deep-remove($value, $keys...)));
            }
        }
    }
    @return $map;
}

// wm-map-deep-keys((foo: 100, bar: (foo: 200, bar: 300, baz: 400)));
// => (foo, bar, baz)
@function wm-map-deep-keys($map, $keys: false) {
    $current-keys: ();
    @each $key, $value in $map {
        $current-keys: append($current-keys, $key);

        @if type-of($value) == map {
            @each $key2 in wm-map-deep-keys($value, $current-keys) {
                $current-keys: append($current-keys, $key2);
            }
        }
    }
    @return wm-list-unique($current-keys);
}

// wm-map-deep-values((foo: 100, bar: (foo: 200, bar: 300, baz: 400)));
// => (100, 200, 300, 400)
@function wm-map-deep-values($map, $values: false) {
    $current-values: ();
    @each $key, $value in $map {
        @if type-of($value) == map {
            @each $value2 in wm-map-deep-values($value, $current-values) {
                $current-values: append($current-values, $value2);
            }
        } @else {
            $current-values: append($current-values, $value);
        }
    }
    @return wm-list-unique($current-values);
}

// wm-map-match(('-0-': '-1-', '-2-': (3: 4)), '-', '-');
// => (-0-, -2-, -1-)
@function wm-map-match($map, $begin-substring, $end-substring) {
    $matched-string-list: ();

    @each $key in wm-map-deep-keys($map) {
        @each $matched-string in wm-str-match(#{$key}, $begin-substring, $end-substring) {
            $matched-string-list: append($matched-string-list, $matched-string);
        }
    }
    @each $value in wm-map-deep-values($map) {
        @each $matched-string in wm-str-match(#{$value}, $begin-substring, $end-substring) {
            $matched-string-list: append($matched-string-list, $matched-string);
        }
    }

    @return wm-list-unique($matched-string-list);
}

// wm-map-depth((foo: 100px)); => 1
// wm-map-depth((foo: 100px, bar: (baz: 200px))); => 2
@function wm-map-depth($map) {
    $depth-num: 1;
    @each $key, $value in $map {
        @if type-of($value) == map {
            $depth-num: max(wm-map-depth($value) + 1, $depth-num);
        }
    }
    @return $depth-num;
}
