// ------------------------------
// Lists
// ------------------------------

// wm-list-has(('foo', 'bar'), 'foo'); => true
// wm-list-has(('foo', 'bar'), 'baz'); => false
@function wm-list-has($list, $value) {
    @return index($list, $value) != null;
}

//wm-list-first(('foo', 'bar')); => "foo"
@function wm-list-first($list) {
    @return nth($list, 1);
}

// wm-list-last(('foo', 'bar')); => "bar"
@function wm-list-last($list) {
    @return nth($list, length($list));
}

// wm-list-indexes(('foo', 'bar', 'baz'), 'foo', 'baz'); => (1, 3)
@function wm-list-indexes($list, $values...) {
    $indexes: ();
    @each $value in $values {
        $indexes: append($indexes, index($list, $value), comma);
    }
    @return $indexes;
}

// wm-list-next(('foo', 'bar'), 1); => "bar"
@function wm-list-next($list, $index) {
    @if $index >= length($list) {
        @return null;
    }
    @return nth($list, $index + 1);
}

// wm-list-unique(('foo', 'bar', 'bar')); => ("foo", "bar")
@function wm-list-unique($list) {
    $new-list: ();
    @each $value in $list {
        @if not wm-list-has($new-list, $value) {
            $new-list: append($new-list, $value, comma);
        }
    }
    @return $new-list;
}

// wm-list-truthy(('foo', '', false, null)); => ("foo")
@function wm-list-truthy($list) {
    $new-list: ();
    @each $value in $list {
        @if $value and ($value != '') {
            $new-list: append($new-list, $value, comma);
        }
    }
    @return $new-list;
}

// wm-nums-calc((1, 2, 3), 1); => (2, 3, 4)
@function wm-nums-calc($list, $value) {
    @for $i from 1 through length($list) {
        $list: set-nth($list, $i, nth($list, $i) + $value);
    }
    @return $list;
}

// wm-list-slice(('foo', 'bar'), 1, 3); => ("foo", "bar")
// wm-list-slice(('foo', 'bar'), 2);    => ("bar")
@function wm-list-slice($list, $begin, $end: length($list) + 1) {
    $new-list: ();
    @for $i from 1 through length($list) {
        @if ($i >= $begin) and ($i < $end) {
            $new-list: append($new-list, nth($list, $i), comma);
        }
    }
    @return $new-list;
}

// wm-list-insert(('foo', 'bar'), 2, 'baz'); => ("foo", "baz", "bar")
@function wm-list-insert($list, $index, $values...) {
    $before: wm-list-slice($list, 1, $index);
    $after: wm-list-slice($list, $index);
    @return join(join($before, $values, comma), $after, comma);
}

// wm-list-move(('foo', 'bar'), 2, 1); => ("bar", "foo")
@function wm-list-move($list, $index, $destination) {
    $value: nth($list, $index);
    $before: wm-list-slice($list, 1, $index);
    $after: wm-list-slice($list, $index + 1);
    @return wm-list-insert(join($before, $after, comma), $destination, $value);
}

// wm-nums-sort(2, -1, 1, 0); => (-1, 0, 1, 2)
@function wm-nums-sort($numbers...) {
    $result: $numbers;
    @for $i from 1 through length($result) {
        $current: nth($result, $i);
        $next: wm-list-next($result, $i);
        @if $next and ($current > $next) {
            $result: wm-list-move($result, $i, $i + 1);
        }
    }
    @if $result == $numbers {
        @return $result;
    }
    @return wm-nums-sort($result...);
}

// wm-list-remove-nth(('foo', 'bar', 'baz'), 1, 2); => ("baz")
@function wm-list-remove-nth($list, $indexes...) {
    $indexes: wm-nums-sort($indexes...);
    $first: wm-list-first($indexes);
    $before: wm-list-slice($list, 1, $first);
    $after: wm-list-slice($list, $first + 1);
    $new-list: join($before, $after, comma);

    $new-indexes: wm-list-slice($indexes, 2);
    @if length($new-indexes) >= 1 {
        $new-indexes: wm-nums-calc($new-indexes, -1);
        @return wm-list-remove-nth($new-list, $new-indexes...);
    }
    @return $new-list;
}

// wm-list-remove(('foo', 'bar', 'baz'), 'foo', 'bar'); => ("baz")
@function wm-list-remove($list, $values...) {
    $indexes: wm-list-indexes($list, $values...);
    $indexes: wm-list-truthy($indexes);
    @if length($indexes) < 1 {
        @return $list;
    }
    @return wm-list-remove-nth($list, $indexes...)
}

// wm-list-to-text(('foo', 'bar'), '[', ']', ',');
// => "[foo],[bar]"
// wm-list-to-text(('foo', 'bar'), '[', ']', ',', false);
// => "[foo],[bar],"
@function wm-list-to-text($list, $before: '', $after: '', $separator: '', $last-separator: false) {
    $result: '';
    @each $value in $list {
        $result: $result + $before + $value + $after + $separator;
    }
    @if not $last-separator {
        $result: str-slice($result, 1, (str-length($result) - str-length($separator)));
    }
    @return $result;
}

// wm-list-map(('foo', 'bar'), to-upper-case); => ("FOO", "BAR")
@function wm-list-map($list, $callback, $args...) {
    $new-list: ();
    @each $value in $list {
        $new-list: append($new-list, call(get-function($callback), $value, $args...), comma);
    }
    @return $new-list;
}

// wm-list-filter-type(('foo', 'bar', 100, true), 'string', 'number');
// => ("foo", "bar", 100)
@function wm-list-filter-type($list, $types...) {
    $new-list: ();
    @each $value in $list {
        @each $type in $types {
            @if type-of($value) == $type {
                $new-list: append($new-list, $value, comma);
            }
        }
    }
    @return $new-list;
}

// ------------------------------
// Numbers
// ------------------------------

// wm-add-unit(10, rem);   => 10rem
// wm-add-unit(10rem, em); => 10rem
@function wm-add-unit($number, $unit: px) {
    @if unitless($number) {
        @return $number + $unit;
    } @else {
        @return $number;
    }
}

// wm-remove-unit(10px); => 10
@function wm-remove-unit($number) {
    @if (type-of($number) == number) and (not unitless($number)) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

// ------------------------------
// Strings
// ------------------------------

// wm-str-has('foo-bar-baz', 'foo'); => true
// wm-str-has('foo-bar-baz', 'qux'); => false
@function wm-str-has($string, $substring) {
    @return str-index($string, $substring) != null;
}

// wm-str-last-index('foo bar baz', 'bar'); => 7
@function wm-str-last-index($string, $substring) {
    @if not wm-str-has($string, $substring) {
        @return null;
    }
    @return str-index($string, $substring) + str-length($substring) - 1;
}

// wm-str-trim(' foo '); => "foo"
@function wm-str-trim($string) {
    @if str-slice($string, 1, 1) == ' ' {
        $string: wm-str-trim(str-slice($string, 2));
    }
    @if str-slice($string, str-length($string)) == ' ' {
        $string: wm-str-trim(str-slice($string, 1, str-length($string) - 1));
    }
    @return $string;
}

// wm-str-replace('foo bar bar', 'bar', 'baz');       => "foo baz baz"
// wm-str-replace('foo bar bar', 'bar', 'baz', true); => "foo baz bar"
@function wm-str-replace($string, $substring, $new-substring: '', $once: false) {
    $index: str-index($string, $substring);
    @if $index {
        $before: str-slice($string, 1, $index - 1);
        $after: str-slice($string, ($index + str-length($substring)));
        $new-string: $before + $new-substring + $after;
        @if not $once {
            @return wm-str-replace($new-string, $substring, $new-substring);
        } @else {
            @return $new-string;
        }
    } @else {
        @return $string;
    }
}

// wm-str-remove('foo bar baz', 'foo', 'bar'); => "  baz"
@function wm-str-remove($string, $substrings...) {
    @each $substring in $substrings {
        $string: wm-str-replace($string, $substring, '');
    }
    @return $string;
}

// wm-str-indexes('foo,bar,baz', ','); => (4, 8)
@function wm-str-indexes($string, $substring) {
    $indexes: ();
    $before-index: 0;
    @while true {
        $index: str-index($string, $substring);
        @if $index {
            $indexes: append($indexes, $index + $before-index, comma);
            $before-index: $before-index + $index;
            $string: str-slice($string, $index + 1);
        } @else {
            @return $indexes;
        }
    }
}

// wm-str-split('foo,bar,baz', ','); => ("foo", "bar", "baz")
@function wm-str-split($string, $separator) {
    @if not wm-str-has($string, $separator) {
        @return append((), $string);
    }

    $list: ();
    @while true {
        $index: str-index($string, $separator);
        @if $index {
            $list: append($list, str-slice($string, 1, $index - 1), comma);
            $string: str-slice($string, $index + 1);
        } @else {
            @return append($list, $string, comma);
        }
    }
}

// wm-str-match('foo [bar] [baz]', '[', ']'); => ("[bar]", "[baz]")
@function wm-str-match($string, $begin-substring, $end-substring) {
    $string-list: ();

    @while true {
        $begin-index: str-index($string, $begin-substring);

        $end-index: null;
        @if $begin-index {
            $end-index: str-index(str-slice($string, $begin-index + 1), $end-substring);
        }
        @if $end-index {
            $end-index: $begin-index + $end-index;
        }

        @if $begin-index and $end-index and (abs($begin-index - $end-index) > 1) {
            $matched-string: str-slice($string, $begin-index, $end-index);
            $string-list: append($string-list, $matched-string, comma);
            $string: str-slice($string, $end-index + 1);
        } @else {
            @return wm-list-unique($string-list);
        }
    }
}

// ------------------------------
// Maps
// ------------------------------

// wm-map-index((key: 'value', key2: 'value2'), 'key2'); => 2
@function wm-map-index($map, $key) {
    @return index(map-keys($map), $key);
}

// wm-map-key((key: 'value', key2: 'value2'), 2); => "key2"
@function wm-map-key($map, $index) {
    @return nth(map-keys($map), $index);
}

// wm-map-set((key: 'value'), 'key2', 'value2');
// => (key: "value", key2: "value2")
@function wm-map-set($map, $key, $value) {
    @return map-merge($map, (unquote($key): $value));
}

// wm-map-deep-get((key: (key2: 'value')), key, key2); => "value"
@function wm-map-deep-get($map, $keys...) {
    @if length($keys) <= 1 {
        @return map-get($map, nth($keys, 1));
    }
    @each $key, $value in $map {
        @if ($key == nth($keys, 1)) and (type-of($value) == map) {
            $keys: wm-list-slice($keys, 2);
            @return wm-map-deep-get($value, $keys...);
        }
    }
}

// wm-map-depth((key: value));         => 1
// wm-map-depth((key: (key2: value))); => 2
@function wm-map-depth($map) {
    $depth: 1;
    @each $key, $value in $map {
        @if type-of($value) == map {
            $depth: max(wm-map-depth($value) + 1, $depth);
        }
    }
    @return $depth;
}

// wm-map-descend((key: (key2: 'value'))); => (key2: "value")
@function wm-map-descend($map) {
    $new-map: ();
    @each $key, $value in $map {
        @if type-of($value) == map {
            $new-map: map-merge($new-map, $value);
        }
    }
    @return $new-map;
}

// wm-map-skip((key: (key2: 'value')), 'key2'); => (key: "value")
@function wm-map-skip($map, $key) {
    $new-map: ();
    @each $parent-key, $value in $map {
        @if type-of($value) == map {
            $new-value: map-get($value, $key);
            @if $new-value {
                $new-map: wm-map-set($new-map, $parent-key, map-get($value, $key));
            }
        }
    }
    @return $new-map;
}

// Returns a map that has minimum value.
// wm-map-min((key: 30, key2: 20, key3: 10)); => (key3: 10)
@function wm-map-min($map) {
    $values: wm-list-filter-type(map-values($map), number);
    $min-value: min($values...);
    $min-key: wm-map-key($map, index($values, $min-value));
    @return ($min-key: $min-value);
}
