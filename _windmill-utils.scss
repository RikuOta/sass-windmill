// ------------------------------
// Lists
// ------------------------------

// wm-list-has(('foo', 'bar', 'baz'), 'baz'); => true
// wm-list-has(('foo', 'bar', 'baz'), 'qux'); => false
@function wm-list-has($list, $value) {
    @return index($list, $value) != null;
}

// wm-list-last(('foo', 'bar', 'baz')); => baz
@function wm-list-last($list) {
    @return nth($list, length($list));
}

// wm-list-unique(('foo', 'bar', 'baz', 'baz')); => "foo" "bar" "baz"
@function wm-list-unique($list) {
    $unique-list: ();
    @each $value in $list {
        @if not wm-list-has($unique-list, $value) {
            $unique-list: append($unique-list, $value);
        }
    }
    @return $unique-list;
}

// wm-list-slice(('foo', 'bar', 'baz'), 2);    => "bar" "baz"
// wm-list-slice(('foo', 'bar', 'baz'), 2, 3); => ("bar",)
@function wm-list-slice($list, $begin, $end: length($list) + 1) {
    $new-list: ();
    @for $i from 1 through length($list) {
        @if ($i >= $begin) and ($i < $end) {
            $new-list: append($new-list, nth($list, $i));
        }
    }
    @return $new-list;
}

// wm-list-to-text(('foo', 'bar', 'baz'), '[', ']', ',');
// => [foo],[bar],[baz]
// wm-list-to-text(('foo', 'bar', 'baz'), '[', ']', ',', false);
// => [foo],[bar],[baz],
@function wm-list-to-text($list, $before: '', $after: '', $separator: '', $ignore-last-separator: true) {
    $result: '';
    @each $value in $list {
        $result: $result + $before + $value + $after + $separator;
    }
    @if $ignore-last-separator {
        $result: str-slice($result, 1, (str-length($result) - str-length($separator)));
    }
    @return $result;
}

// wm-list-map(('foo', 'bar', 'baz'), to-upper-case); => "FOO" "BAR" "BAZ"
@function wm-list-map($list, $callback, $args...) {
    $new-list: ();
    @each $value in $list {
        $new-list: append($new-list, call(get-function($callback), $value, $args...));
    }
    @return $new-list;
}

// ------------------------------
// Numbers
// ------------------------------

// wm-add-unit(10);       => 10px
// wm-add-unit(10, em);   => 10em
// wm-add-unit(10em, px); => 10em
@function wm-add-unit($number, $unit: px) {
    @if unitless($number) {
        @return $number + $unit;
    } @else {
        @return $number;
    }
}

// wm-remove-unit(10px); => 10
@function wm-remove-unit($number) {
    @if (type-of($number) == number) and (not unitless($number)) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

// ------------------------------
// Strings
// ------------------------------

// wm-str-has('foo-bar-baz', 'foo'); => true
// wm-str-has('foo-bar-baz', 'qux'); => false
@function wm-str-has($string, $substring) {
    @return str-index($string, $substring) != null;
}

// wm-str-replace('foo-bar-baz-baz', 'baz', 'qux');      => foo-bar-qux-qux
// wm-str-replace('foo-bar-baz-baz', 'baz', 'qux' true); => foo-bar-qux-baz
@function wm-str-replace($string, $substring, $new-substring: '', $is-once: false) {
    $index: str-index($string, $substring);
    @if $index {
        $before: str-slice($string, 1, $index - 1);
        $after: str-slice($string, ($index + str-length($substring)));
        $new-string: $before + $new-substring + $after;
        @if not $is-once {
            @return wm-str-replace($new-string, $substring, $new-substring);
        } @else {
            @return $new-string;
        }
    } @else {
        @return $string;
    }
}

// wm-str-remove('foo-bar-baz', foo, bar); => --baz
@function wm-str-remove($string, $substrings...) {
    @each $substring in $substrings {
        $string: wm-str-replace($string, $substring, '');
    }
    @return $string;
}

// wm-str-indexes('foo-bar-baz', '-'); => 4 8
@function wm-str-indexes($string, $substring) {
    $indexes: ();
    $before-index: 0;
    @while true {
        $index: str-index($string, $substring);
        @if $index {
            $indexes: append($indexes, $index + $before-index);
            $before-index: $before-index + $index;
            $string: str-slice($string, $index + 1);
        } @else {
            @return $indexes;
        }
    }
}

// wm-str-split('foo-bar-baz', '-'); => "foo" "bar" "baz"
@function wm-str-split($string, $separator) {
    @if not wm-str-has($string, $separator) {
        @return append((), $string);
    }

    $list: ();
    @while true {
        $index: str-index($string, $separator);
        @if $index {
            $list: append($list, str-slice($string, 1, $index - 1));
            $string: str-slice($string, $index + 1);
        } @else {
            @return append($list, $string);
        }
    }
}

// wm-str-slice-based-on-substr('abc-def-hij', '-def-', 1, 2);       => hi
// wm-str-slice-based-on-substr('abc-def-hij', '-def-', 1, 2, true); => bc
@function wm-str-slice-based-on-substr($string, $base-substring, $begin_positive, $end_positive, $is-back: false) {
    @if not wm-str-has($string, $base-substring) {
        @return $string;
    }

    $base-substr-index: str-index($string, $base-substring);
    $base-substr-length: str-length($base-substring);
    $begin-index: $base-substr-index + $base-substr-length + $begin_positive - 1;
    $end-index: $base-substr-index + $base-substr-length + $end_positive - 1;

    @if $is-back {
        $begin-index: $begin-index - $base-substr-length - $end_positive;
        $end-index: $end-index - $base-substr-length - $end_positive;
    }

    @return str-slice($string, $begin-index, $end-index);
}

// wm-str-match('foo [bar] baz [qux]', '[', ']'); => "[bar]" "[qux]"
@function wm-str-match($string, $begin-substring, $end-substring) {
    $string-list: ();
    @while true {
        $begin-index: str-index($string, $begin-substring);

        $end-index: null;
        @if $begin-index {
            $end-index: str-index(str-slice($string, $begin-index + 1), $end-substring);
        }
        @if $end-index {
            $end-index: $begin-index + $end-index;
        }

        @if $begin-index and $end-index and (abs($begin-index - $end-index) > 1) {
            $matched-string: str-slice($string, $begin-index, $end-index);
            $string-list: append($string-list, $matched-string);
            $string: str-slice($string, $end-index + 1);
        } @else {
            @return wm-list-unique($string-list);
        }
    }
}

// ------------------------------
// Maps
// ------------------------------

// wm-map-get-by-index((foo: 100, bar: 200), 2); => 200
@function wm-map-get-by-index($map, $index) {
    @return map-get($map, nth(map-keys($map), $index));
}

// wm-map-get-key((foo: 100, bar: 200), 1);          => bar
// wm-map-get-key((foo: 100, bar: 200), false, 200); => bar
@function wm-map-get-key($map, $index: false, $value: false) {
    @if (not $index) and $value {
        $index: index(map-values($map), $value);
    }
    @if (not $index) or $index > length(map-keys($map)) {
        @return null;
    }
    @return nth(map-keys($map), $index);
}

// wm-map-set((foo: 100, bar: 200), baz, 300);=> (foo: 100, bar: 200, baz: 300)
@function wm-map-set($map, $key, $value) {
    @return map-merge($map, ($key: $value));
}

// wm-map-deep-get((foo: (bar: 100)), foo, bar); => 100
@function wm-map-deep-get($map, $keys...) {
    @if length($keys) <= 1 {
        @return map-get($map, nth($keys, 1));
    }
    @each $key, $value in $map {
        @if ($key == nth($keys, 1)) and (type-of($value) == map) {
            $keys: wm-list-slice($keys, 2);
            @return wm-map-deep-get($value, $keys...);
        }
    }
}

// wm-map-depth((foo: 100));                  => 1
// wm-map-depth((foo: 100, bar: (baz: 200))); => 2
@function wm-map-depth($map) {
    $depth: 1;
    @each $key, $value in $map {
        @if type-of($value) == map {
            $depth: max(wm-map-depth($value) + 1, $depth);
        }
    }
    @return $depth;
}

// wm-map-fill((foo: 100, bar: (baz: 200))); => (baz: 200)
@function wm-map-fill($map) {
    $new-map: ();
    @each $key, $value in $map {
        @if type-of($value) == map {
            $new-map: map-merge($new-map, $value);
        }
    }
    @return $new-map;
}
